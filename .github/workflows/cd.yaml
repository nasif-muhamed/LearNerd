name: CD Pipeline for Django Microservices

on:
  # workflow_dispatch:  # we have to manually deploy after the CI is completed
  # Or use workflow_run if we want auto-deployment after CI
  workflow_run:
    workflows: ["CI Pipeline for Django Microservices"]
    types:
      - completed

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  DOCKER_SERVICE_PREFIX_NAME: ${{ vars.DOCKER_SERVICE_PREFIX_NAME }}
  DOCKER_IMAGE_TAG: ${{ vars.DOCKER_IMAGE_TAG }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: api_gateway_django
            deployment_name: api-gateway
          - name: user_service
            deployment_name: user-service
          - name: admin_service
            deployment_name: admin-service
          - name: course_service
            deployment_name: course-service
          - name: channel_service
            deployment_name: channel-service

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.GCP_SA_KEY }}"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q
          gcloud components update -q

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --zone ${{ env.GCP_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl rollout restart deployment/${{ matrix.service.deployment_name }} -n default
          kubectl rollout status deployment/${{ matrix.service.deployment_name }} -n default
