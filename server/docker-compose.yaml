services:
    # Redis container
    redis:
        image: redis
        container_name: redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        networks:
            - learn_network

    # Postgres database container
    db:
        image: postgres:latest
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_NAME_USER}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - learn_network

    # RabbitMQ message broker for async communication (the 3-management tag is used to get Management Plugin, which help with visualization web ui. Can avoid it in production)
    rabbitmq:
        image: "rabbitmq:3-management"
        container_name: rabbitmq
        ports:
        - "15672:15672"
        - "5672:5672"
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
        networks:
        - learn_network

    api_gateway_django:
        build:
            context: ./api_gateway_django
        container_name: api_gateway
        environment:
            - DJANGO_SECRET_GATEWAY=${DJANGO_SECRET_GATEWAY}
            - DEBUG=${DEBUG}
            - JWT_SECRET_KEY_USER=${JWT_SECRET_KEY_USER}
            - JWT_ALGORITHM_USER=${JWT_ALGORITHM_USER}
            - USER_SERVICE_URL=${USER_SERVICE_URL}
            - ADMIN_SERVICE_URL=${ADMIN_SERVICE_URL}
            - COURSE_SERVICE_URL=${COURSE_SERVICE_URL}
        ports:
            - "8000:8000"
        volumes:
            - ./api_gateway_django:/app
        command: >
            sh -c "python manage.py runserver 0.0.0.0:8000"
        depends_on:
            - db
            - redis
        networks:
            - learn_network

    user_service:
        build:
            context: ./user_service
        container_name: user_service
        environment:
            - DJANGO_SECRET_USER=${DJANGO_SECRET_USER}
            - DEBUG=${DEBUG}
            - JWT_SECRET_KEY_USER=${JWT_SECRET_KEY_USER}
            - JWT_ALGORITHM_USER=${JWT_ALGORITHM_USER}
            - DB_ENGINE=${DB_ENGINE}
            - DB_HOST=${DB_HOST}
            - DB_NAME_USER=${DB_NAME_USER}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_PORT=${DB_PORT}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - EMAIL_HOST_USER=${EMAIL_HOST_USER}
            - EMAIL_HOST_PASSWORD_USER=${EMAIL_HOST_PASSWORD_USER}
            - ADMIN_SERVICE_URL=${ADMIN_SERVICE_URL}
            - COURSE_SERVICE_URL=${COURSE_SERVICE_URL}
            - FIREBASE_CREDENTIALS_PATH=${FIREBASE_CREDENTIALS_PATH}
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
        ports:
            - "8001:8001"
        volumes:
            - ./user_service:/app
        command: >
            sh -c "python manage.py makemigrations &&
                   python manage.py migrate &&
                   python manage.py runserver 0.0.0.0:8001 & 
                   celery -A user_service worker -l info & 
                   python manage.py run_consumer"
        depends_on:
            - db
            - redis
            - rabbitmq
            - api_gateway_django
        networks:
            - learn_network
    admin_service:
        build:
            context: ./admin_service
        container_name: admin_service
        environment:
            - DJANGO_SECRET_ADMIN=${DJANGO_SECRET_ADMIN}
            - DEBUG=${DEBUG}
            - JWT_SECRET_KEY_USER=${JWT_SECRET_KEY_USER}
            - JWT_ALGORITHM_USER=${JWT_ALGORITHM_USER}
            - DB_ENGINE=${DB_ENGINE}
            - DB_HOST=${DB_HOST}
            - DB_NAME_USER=${DB_NAME_ADMIN}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_PORT=${DB_PORT}
            - EMAIL_HOST_USER=${EMAIL_HOST_USER}
            - EMAIL_HOST_PASSWORD_USER=${EMAIL_HOST_PASSWORD_USER}
            - USER_SERVICE_URL=${USER_SERVICE_URL}
            - COURSE_SERVICE_URL=${COURSE_SERVICE_URL}
            - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
            - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
            - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
        ports:
            - "8002:8002"
        volumes:
            - ./admin_service:/app
        command: >
            sh -c "python manage.py makemigrations &&
                   python manage.py migrate &&
                   python manage.py runserver 0.0.0.0:8002"
        depends_on:
            - user_service
        networks:
            - learn_network
volumes:
    postgres_data:
    redis_data:

networks:
    learn_network:
        driver: bridge
